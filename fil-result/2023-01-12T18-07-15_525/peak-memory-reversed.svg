<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="896" onload="init(evt)" viewBox="0 0 1200 896" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="896" fill="url(#background)"/>
    <text id="title" x="50.0000%" y="32.00">Peak Tracked Memory Usage (1082.5 MiB), Reversed</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" x="10" y="32.00">Reset Zoom</text>
    <text id="search" x="1190" y="32.00">Search</text>
    <text id="matched" x="1190" y="883.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="1123998460">
        <g>
            <title>&lt;__array_function__ internals&gt;:180 (concatenate) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="144" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="157.50">&lt;_..</text>
        </g>
        <g>
            <title>                result[name] = np.concatenate(arrs)  # type: ignore[arg-type] (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="166" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="179.50"> ..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py:402 (_concatenate_chunks) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="188" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="201.50">/U..</text>
        </g>
        <g>
            <title>                data = _concatenate_chunks(chunks) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="210" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="223.50"> ..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py:232 (read) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="232" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="245.50">/U..</text>
        </g>
        <g>
            <title>                ) = self._engine.read(  # type: ignore[attr-defined] (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="254" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="267.50"> ..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1778 (read) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="276" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="289.50">/U..</text>
        </g>
        <g>
            <title>        return self.read(nrows=size) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="298" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="311.50"> ..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1810 (get_chunk) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="320" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="333.50">/U..</text>
        </g>
        <g>
            <title>            return self.get_chunk() (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="342" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="355.50"> ..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1698 (__next__) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="364" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="377.50">/U..</text>
        </g>
        <g>
            <title>        for df in reader: (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="386" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="399.50"> ..</text>
        </g>
        <g>
            <title>./greedysub.py:103 (__init__) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="408" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="421.50">./..</text>
        </g>
        <g>
            <title>    graph = NeighborGraph(args) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="430" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="443.50"> ..</text>
        </g>
        <g>
            <title>./greedysub.py:16 (main) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="452" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="465.50">./..</text>
        </g>
        <g>
            <title>    main() (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="474" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="487.50"> ..</text>
        </g>
        <g>
            <title>./greedysub.py:270 (&lt;module&gt;) (40,005,736 bytes, 3.56%)</title>
            <rect x="0.0000%" y="496" width="3.5592%" height="21" fill="rgb(255,221,221)" fg:x="0" fg:w="40005736"/>
            <text x="0.2500%" y="509.50">./..</text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (3,044,376 bytes, 0.27%)</title>
            <rect x="3.5592%" y="144" width="0.2709%" height="21" fill="rgb(255,242,242)" fg:x="40005736" fg:w="3044376"/>
            <text x="3.8092%" y="157.50"></text>
        </g>
        <g>
            <title> (3,044,376 bytes, 0.27%)</title>
            <rect x="3.5592%" y="166" width="0.2709%" height="21" fill="rgb(255,242,242)" fg:x="40005736" fg:w="3044376"/>
            <text x="3.8092%" y="179.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:1184 (exec_module) (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="188" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="201.50"></text>
        </g>
        <g>
            <title> (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="210" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="223.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="232" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="245.50"></text>
        </g>
        <g>
            <title> (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="254" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="267.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="276" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="289.50"></text>
        </g>
        <g>
            <title> (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="298" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="311.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (2,897,604 bytes, 0.26%)</title>
            <rect x="3.5723%" y="320" width="0.2578%" height="21" fill="rgb(255,242,242)" fg:x="40152508" fg:w="2897604"/>
            <text x="3.8223%" y="333.50"></text>
        </g>
        <g>
            <title> (51,468,138 bytes, 4.58%)</title>
            <rect x="0.0000%" y="122" width="4.5790%" height="21" fill="rgb(255,217,217)" fg:x="0" fg:w="51468138"/>
            <text x="0.2500%" y="135.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:672 (_compile_bytecode) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="144" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="157.50"></text>
        </g>
        <g>
            <title> (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="166" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="179.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:1012 (get_code) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="188" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="201.50"></text>
        </g>
        <g>
            <title> (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="210" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="223.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:879 (exec_module) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="232" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="245.50"></text>
        </g>
        <g>
            <title> (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="254" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="267.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="276" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="289.50"></text>
        </g>
        <g>
            <title> (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="298" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="311.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="320" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="333.50"></text>
        </g>
        <g>
            <title> (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="342" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="355.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (8,418,026 bytes, 0.75%)</title>
            <rect x="3.8301%" y="364" width="0.7489%" height="21" fill="rgb(255,237,237)" fg:x="43050112" fg:w="8418026"/>
            <text x="4.0801%" y="377.50"></text>
        </g>
        <g>
            <title>        result = np.array(self._data, dtype=dtype) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="122" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="135.50">        result = np.array(self._data, dtype=dtype)</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/arrays/string_arrow.py:174 (to_numpy) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="144" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="157.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/array..</text>
        </g>
        <g>
            <title>        return self.to_numpy(dtype=dtype) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="166" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="179.50">        return self.to_numpy(dtype=dtype)</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/arrays/string_arrow.py:161 (__array__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="188" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="201.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/array..</text>
        </g>
        <g>
            <title>    result[:] = values (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="210" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="223.50">    result[:] = values</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/dtypes/cast.py:1784 (construct_1d_object_array_from_listlike) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="232" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="245.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/dtype..</text>
        </g>
        <g>
            <title>            subarr = construct_1d_object_array_from_listlike(arr) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="254" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="267.50">            subarr = construct_1d_object_array_from_listlike(arr)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/construction.py:809 (_try_cast) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="276" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="289.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/const..</text>
        </g>
        <g>
            <title>                subarr = _try_cast(data, dtype, copy, raise_cast_failure) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="298" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="311.50">                subarr = _try_cast(data, dtype, copy, raise_cast_failure)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/construction.py:622 (sanitize_array) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="320" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="333.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/const..</text>
        </g>
        <g>
            <title>                data = sanitize_array(data, index, dtype, copy) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="342" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="355.50">                data = sanitize_array(data, index, dtype, copy)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/series.py:470 (__init__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="364" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="377.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/serie..</text>
        </g>
        <g>
            <title>    return Series( (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="386" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="399.50">    return Series(</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/construction.py:915 (create_series_with_explicit_dtype) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="408" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="421.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/const..</text>
        </g>
        <g>
            <title>        s = create_series_with_explicit_dtype( (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="430" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="443.50">        s = create_series_with_explicit_dtype(</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/series.py:529 (_init_dict) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="452" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="465.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/serie..</text>
        </g>
        <g>
            <title>                data, index = self._init_dict(data, index, dtype) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="474" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="487.50">                data, index = self._init_dict(data, index, dtype)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/series.py:436 (__init__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="496" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="509.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/serie..</text>
        </g>
        <g>
            <title>        arrays = Series(data, index=columns, dtype=object) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="518" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="531.50">        arrays = Series(data, index=columns, dtype=object)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/internals/construction.py:443 (dict_to_mgr) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="540" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="553.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/inter..</text>
        </g>
        <g>
            <title>            mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="562" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="575.50">            mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/frame.py:663 (__init__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="584" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="597.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/frame..</text>
        </g>
        <g>
            <title>            df = DataFrame(col_dict, columns=columns, index=index) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="606" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="619.50">            df = DataFrame(col_dict, columns=columns, index=index)..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1795 (read) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="628" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="641.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers..</text>
        </g>
        <g>
            <title>        return self.read(nrows=size) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="650" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="663.50">        return self.read(nrows=size)</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1810 (get_chunk) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="672" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="685.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers..</text>
        </g>
        <g>
            <title>            return self.get_chunk() (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="694" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="707.50">            return self.get_chunk()</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1698 (__next__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="716" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="729.50">/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers..</text>
        </g>
        <g>
            <title>        for df in reader: (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="738" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="751.50">        for df in reader:</text>
        </g>
        <g>
            <title>./greedysub.py:103 (__init__) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="760" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="773.50">./greedysub.py:103 (__init__)</text>
        </g>
        <g>
            <title>    graph = NeighborGraph(args) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="782" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="795.50">    graph = NeighborGraph(args)</text>
        </g>
        <g>
            <title>./greedysub.py:16 (main) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="804" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="817.50">./greedysub.py:16 (main)</text>
        </g>
        <g>
            <title>    main() (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="826" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="839.50">    main()</text>
        </g>
        <g>
            <title>./greedysub.py:270 (&lt;module&gt;) (736,594,752 bytes, 65.53%)</title>
            <rect x="4.6070%" y="848" width="65.5334%" height="21" fill="rgb(255,128,128)" fg:x="51783110" fg:w="736594752"/>
            <text x="4.8570%" y="861.50">./greedysub.py:270 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>        return cls(pa.array(result, type=pa.string(), from_pandas=True)) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="122" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="135.50">        return cls(pa.array(result..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/arrays/string_arrow.py:144 (_from_sequence) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="144" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="157.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>        return cls._from_sequence(strings, dtype=dtype, copy=copy) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="166" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="179.50">        return cls._from_sequence(..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/core/arrays/string_arrow.py:150 (_from_sequence_of_strings) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="188" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="201.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>                chunks = self._reader.read_low_memory(nrows) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="210" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="223.50">                chunks = self._rea..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/c_parser_wrapper.py:230 (read) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="232" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="245.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>                ) = self._engine.read(  # type: ignore[attr-defined] (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="254" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="267.50">                ) = self._engine.r..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1778 (read) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="276" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="289.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>        return self.read(nrows=size) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="298" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="311.50">        return self.read(nrows=siz..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1810 (get_chunk) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="320" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="333.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>            return self.get_chunk() (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="342" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="355.50">            return self.get_chunk(..</text>
        </g>
        <g>
            <title>/Users/agpe/.pyenv/versions/3.10.7/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1698 (__next__) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="364" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="377.50">/Users/agpe/.pyenv/versions/3.10.7/..</text>
        </g>
        <g>
            <title>        for df in reader: (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="386" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="399.50">        for df in reader:..</text>
        </g>
        <g>
            <title>./greedysub.py:103 (__init__) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="408" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="421.50">./greedysub.py:103 (__init__)</text>
        </g>
        <g>
            <title>    graph = NeighborGraph(args) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="430" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="443.50">    graph = NeighborGraph(args)..</text>
        </g>
        <g>
            <title>./greedysub.py:16 (main) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="452" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="465.50">./greedysub.py:16 (main)</text>
        </g>
        <g>
            <title>    main() (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="474" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="487.50">    main()</text>
        </g>
        <g>
            <title>./greedysub.py:270 (&lt;module&gt;) (335,572,590 bytes, 29.86%)</title>
            <rect x="70.1405%" y="496" width="29.8553%" height="21" fill="rgb(255,168,168)" fg:x="788377862" fg:w="335572590"/>
            <text x="70.3905%" y="509.50">./greedysub.py:270 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>all (1,123,998,460 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="1123998460"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>